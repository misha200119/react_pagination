{"version":3,"sources":["components/Pagination/Pagination.tsx","functions/getPossiblePagesPagination.tsx","App.tsx","index.tsx"],"names":["Pagination","total","perPage","page","onPageChange","previousPage","nextPage","useState","isNextDisabled","setIsNextDisabled","isPrevDisabled","setisPrevDisabled","currentPage","lastPage","Math","ceil","firstShowedElement","lastShowedElement","displayedPages","useMemo","currentIndex","lastIndex","outerArr","start","max","end","min","i","push","unshift","map","value","key","shortid","generate","getPossiblePagesPagination","useEffect","length","className","disabled","type","onClick","elem","classNames","pagination__btn_selected","Number","App","setCurrentPage","setPerPage","index","prevPage","method","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"uPAgBaA,EAA8B,SAAC,GAOrC,IANLC,EAMI,EANJA,MAMI,IALJC,eAKI,MALM,EAKN,MAJJC,YAII,MAJG,EAIH,EAHJC,EAGI,EAHJA,aACAC,EAEI,EAFJA,aACAC,EACI,EADJA,SAEA,EAA4CC,oBAAS,GAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KAEMC,EAAcT,EAEdU,EAAWC,KAAKC,KAAKd,EAAQC,GAE7Bc,EAAqBd,GAAWU,EAAc,GAAK,EACnDK,EAAoBL,EAAcV,EAAUD,EAC9CA,EACAW,EAAcV,EAEZgB,EAAiBC,mBAAQ,WAC7B,OCnCsC,SACxCC,EACAC,GASA,IAPA,IAAMC,EAAW,GAIXC,EAAQT,KAAKU,IAAI,EAAIJ,EAHJ,GAIjBK,EAAMX,KAAKY,IAAKL,EAAY,EAAKD,EAJhB,GAMdO,EAAIJ,EAAOI,GAAKF,EAAKE,GAAK,EACjCL,EAASM,KAAKD,GAiBhB,OAdIP,EAVmB,EAUa,GAClCE,EAASO,QAVM,OAabT,EAdmB,EAcaC,EAAY,GAC9CC,EAASM,KAdM,OAiBC,IAAdP,GACFC,EAASM,KAAKP,GAGhBC,EAASO,QAAQ,GAEVP,EAASQ,KAAI,SAAAC,GAAK,MAAK,CAC5BA,QACAC,IAAKC,IAAQC,eDINC,CAA2BvB,EAAaC,KAC9C,CAACZ,EAAOC,EAASC,IAgBpB,OAdAiC,qBAAU,WAENzB,IADER,EAAO,IAMPA,IAASe,EAAeA,EAAemB,OAAS,GAAGN,MACrDtB,GAAkB,GAElBA,GAAkB,KAEnB,CAACN,IAGF,sBAAKmC,UAAU,aAAf,UACE,oBAAIA,UAAU,oBAAd,mBACMtB,EADN,cAC8BC,EAD9B,eACsDhB,KAEtD,sBAAKqC,UAAU,uBAAf,UACE,wBACEA,UAAU,kBACVC,SAAU7B,EACV8B,KAAK,SACLC,QAASpC,EAJX,kBASA,8BACGa,EAAeY,KAAI,SAAAY,GAClB,MAAmB,QAAfA,EAAKX,MAEL,mBACEO,UAAU,kBADZ,SAIGI,EAAKX,OAFDW,EAAKV,KAQd,wBACEM,UACEK,IACE,kBACA,CAAEC,yBAA0BF,EAAKX,QAAUnB,IAI/C4B,KAAK,SACLC,QAAS,WACPrC,EAAayC,OAAOH,EAAKX,SAV7B,SAaGW,EAAKX,OANDW,EAAKV,UAYlB,wBACEM,UAAU,kBACVC,SAAU/B,EACVgC,KAAK,SACLC,QAASnC,EAJX,yBEhCOwC,G,MA/DO,WACpB,MAAsCvC,mBAAS,GAA/C,mBAAOK,EAAP,KAAoBmC,EAApB,KACA,EAA8BxC,mBAAS,GAAvC,mBAAOL,EAAP,KAAgB8C,EAAhB,KAcA,OACE,sBAAKV,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,wBAIA,cAAC,EAAD,CACErC,MAAO,GACPC,QAASA,EACTC,KAAMS,EACNR,aAtBe,SAAC6C,GACpBF,EAAeE,IAsBX5C,aAnBe,WACnB0C,GAAe,SAAAG,GAAQ,OAAIA,EAAW,MAmBlC5C,SAhBW,WACfyC,GAAe,SAAAG,GAAQ,OAAIA,EAAW,QAkBpC,sBAAMC,OAAO,MAAMb,UAAU,YAA7B,SACE,uDAEE,yBACEP,MAAO7B,EACPkD,SAAU,YAAiB,IAAdC,EAAa,EAAbA,OACXN,EAAe,GACfC,EAAWH,OAAOQ,EAAOtB,SAJ7B,UAOE,wBAAQA,MAAM,IAAd,eAIA,wBAAQA,MAAM,IAAd,eAIA,wBAAQA,MAAM,KAAd,gBAIA,wBAAQA,MAAM,KAAd,6BCzDZuB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.a04ddce1.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport classNames from 'classnames';\nimport { getPossiblePagesPagination }\n  from '../../functions/getPossiblePagesPagination';\n\nimport './Pagination.scss';\n\ntype Props = {\n  total: number;\n  perPage: number;\n  page: number;\n  onPageChange: (index: number) => void;\n  previousPage: () => void;\n  nextPage: () => void;\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage = 5,\n  page = 1,\n  onPageChange,\n  previousPage,\n  nextPage,\n}) => {\n  const [isNextDisabled, setIsNextDisabled] = useState(false);\n  const [isPrevDisabled, setisPrevDisabled] = useState(false);\n\n  const currentPage = page;\n\n  const lastPage = Math.ceil(total / perPage);\n\n  const firstShowedElement = perPage * (currentPage - 1) + 1;\n  const lastShowedElement = currentPage * perPage > total\n    ? total\n    : currentPage * perPage;\n\n  const displayedPages = useMemo(() => {\n    return getPossiblePagesPagination(currentPage, lastPage);\n  }, [total, perPage, page]);\n\n  useEffect(() => {\n    if (page > 1) {\n      setisPrevDisabled(false);\n    } else {\n      setisPrevDisabled(true);\n    }\n\n    if (page === displayedPages[displayedPages.length - 1].value) {\n      setIsNextDisabled(true);\n    } else {\n      setIsNextDisabled(false);\n    }\n  }, [page]);\n\n  return (\n    <div className=\"pagination\">\n      <h2 className=\"pagination__title\">\n        {`${firstShowedElement} - ${lastShowedElement} of ${total}`}\n      </h2>\n      <div className=\"pagination__btn-wrap\">\n        <button\n          className=\"pagination__btn\"\n          disabled={isPrevDisabled}\n          type=\"button\"\n          onClick={previousPage}\n        >\n          «\n        </button>\n\n        <div>\n          {displayedPages.map(elem => {\n            if (elem.value === '...') {\n              return (\n                <p\n                  className=\"pagination__etc\"\n                  key={elem.key}\n                >\n                  {elem.value}\n                </p>\n              );\n            }\n\n            return (\n              <button\n                className={\n                  classNames(\n                    'pagination__btn',\n                    { pagination__btn_selected: elem.value === currentPage },\n                  )\n                }\n                key={elem.key}\n                type=\"button\"\n                onClick={() => {\n                  onPageChange(Number(elem.value));\n                }}\n              >\n                {elem.value}\n              </button>\n            );\n          })}\n        </div>\n\n        <button\n          className=\"pagination__btn\"\n          disabled={isNextDisabled}\n          type=\"button\"\n          onClick={nextPage}\n        >\n          »\n        </button>\n      </div>\n    </div>\n  );\n};\n","import shortid from 'shortid';\n\nexport const getPossiblePagesPagination = (\n  currentIndex: number,\n  lastIndex: number,\n) => {\n  const outerArr = [];\n  const neighboorCount = 1;\n  const etcValue = '...';\n\n  const start = Math.max(2, (currentIndex - neighboorCount));\n  const end = Math.min((lastIndex - 1), (currentIndex + neighboorCount));\n\n  for (let i = start; i <= end; i += 1) {\n    outerArr.push(i);\n  }\n\n  if (currentIndex - neighboorCount > 2) {\n    outerArr.unshift(etcValue);\n  }\n\n  if (currentIndex + neighboorCount < lastIndex - 1) {\n    outerArr.push(etcValue);\n  }\n\n  if (lastIndex !== 1) {\n    outerArr.push(lastIndex);\n  }\n\n  outerArr.unshift(1);\n\n  return outerArr.map(value => ({\n    value,\n    key: shortid.generate(),\n  }));\n};\n","import React, {\n  useState,\n} from 'react';\nimport { Pagination } from './components/Pagination';\n\nimport './App.scss';\n\nconst App: React.FC = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage, setPerPage] = useState(5);\n\n  const onPageChange = (index: number) => {\n    setCurrentPage(index);\n  };\n\n  const previousPage = () => {\n    setCurrentPage(prevPage => prevPage - 1);\n  };\n\n  const nextPage = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">\n        Pagination\n      </h1>\n\n      <Pagination\n        total={42}\n        perPage={perPage}\n        page={currentPage}\n        onPageChange={onPageChange}\n        previousPage={previousPage}\n        nextPage={nextPage}\n      />\n\n      <form method=\"get\" className=\"app__form\">\n        <label>\n          Items on one page:\n          <select\n            value={perPage}\n            onChange={({ target }) => {\n              setCurrentPage(1);\n              setPerPage(Number(target.value));\n            }}\n          >\n            <option value=\"3\">\n              3\n            </option>\n\n            <option value=\"5\">\n              5\n            </option>\n\n            <option value=\"10\">\n              10\n            </option>\n\n            <option value=\"20\">\n              20\n            </option>\n          </select>\n        </label>\n      </form>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}